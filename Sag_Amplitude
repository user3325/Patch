import numpy as np
import scipy.io
from scipy.interpolate import interp1d
import tkinter as tk
from tkinter import filedialog
import os
import re
import matplotlib.pyplot as plt
from matplotlib.widgets import Button
import glob
import sys
from scipy.stats import linregress

# Ensure Tkinter compatibility in Jupyter
try:
    %matplotlib tk
except NameError:
    pass

# Set matplotlib style
plt.style.use('seaborn-v0_8-whitegrid')
plt.rcParams['font.family'] = 'Arial'
plt.rcParams['font.size'] = 12

# Function to extract temperature from file name
def extract_temperature(filename):
    basename = os.path.basename(filename).replace('.mat', '')
    parts = basename.split('_')
    if len(parts) >= 2:
        temp = parts[1]  # For 'Sag_25_*', 'Sag_33_*'
        if re.match(r'^\d{1,2}(#\d)?$', temp):
            return temp + 'C' if not temp.endswith('#2') else temp
    return None

# File selection with Tkinter GUI
def select_files_and_temperatures():
    file_paths_by_temp = {}
    print("Initializing Tkinter for file selection...")
    try:
        root = tk.Tk()
        root.withdraw()
        print("Tkinter initialized. Opening file dialog...")
        
        file_paths = filedialog.askopenfilenames(
            title="Select ALL .mat files for analysis (e.g., Sag_25_*.mat, Sag_33_*.mat)",
            filetypes=[("MATLAB files", "*.mat")]
        )
        print(f"File dialog returned: {file_paths}")
        
        if not file_paths:
            print("❌ No files selected.")
            root.destroy()
            return file_paths_by_temp
        
        for file_path in file_paths:
            temp = extract_temperature(file_path)
            if temp in ['25C', '33C', '33#2']:
                if temp not in file_paths_by_temp:
                    file_paths_by_temp[temp] = []
                file_paths_by_temp[temp].append(file_path)
                print(f"Assigned {file_path} to {temp}")
            else:
                print(f"⚠️ Skipping {file_path}: Invalid temperature format.")
        
        root.destroy()
        print("File selection completed.")
    except Exception as e:
        print(f"❌ Tkinter failed: {e}")
        print("Falling back to console input...")
        file_paths_by_temp = console_fallback()
    
    return file_paths_by_temp

# Console fallback
def console_fallback():
    file_paths_by_temp = {}
    print("\nConsole File Selection:")
    print("Enter a directory to scan for .mat files")
    dir_path = input("Directory path (e.g., C:\\Users\\Administrator\\Desktop\\POMC Analysis\\POMC_CS\\250210_CS\\Sag\\): ").strip()
    if os.path.isdir(dir_path):
        files = glob.glob(os.path.join(dir_path, "*.mat"))
        if not files:
            print(f"❌ No .mat files found in {dir_path}")
            return file_paths_by_temp
        for file_path in files:
            temp = extract_temperature(file_path)
            if temp in ['25C', '33C', '33#2']:
                if temp not in file_paths_by_temp:
                    file_paths_by_temp[temp] = []
                file_paths_by_temp[temp].append(file_path)
                print(f"Assigned {file_path} to {temp}")
            else:
                print(f"⚠️ Skipping {file_path}: Invalid temperature format.")
    else:
        print(f"❌ Invalid directory: {dir_path}")
    return file_paths_by_temp

# Calculate sag slope
def calculate_sag_slope(time, voltage, v_peak, v_ss, start_time, end_time):
    sag_indices = (time >= start_time) & (time <= end_time) & (voltage >= v_peak) & (voltage <= v_ss)
    if np.sum(sag_indices) < 2:
        return np.nan  # Not enough points for slope
    sag_time = time[sag_indices]
    sag_voltage = voltage[sag_indices]
    try:
        slope, _, _, _, _ = linregress(sag_time, sag_voltage)
        return slope  # mV/s
    except:
        return np.nan  # Fallback if regression fails

# Initialize file selection
file_paths_by_temp = select_files_and_temperatures()

if not file_paths_by_temp:
    print("❌ No valid files selected. Exiting.")
    sys.exit(1)

temperatures = list(file_paths_by_temp.keys())
temperatures = sorted(temperatures, key=lambda x: {'33C': 0, '25C': 1, '33#2': 2}[x])
if len(temperatures) < 2 or len(temperatures) > 3:
    print(f"❌ Found {len(temperatures)} temperatures: {', '.join(temperatures)}. Please provide 2 or 3 temperatures (25C, 33C, 33#2). Exiting.")
    sys.exit(1)

print(f"Processing temperatures: {', '.join(temperatures)}")

# Create output directory
output_dir = os.path.join(os.path.dirname(list(file_paths_by_temp.values())[0][0]), "Sag_Analysis_Results")
if not os.path.exists(output_dir):
    os.makedirs(output_dir)
    print(f"Created output directory: {output_dir}")

# Initialize storage
results = []
all_pulses_data = []
sag_data_by_temp = {temp: [] for temp in temperatures}

# Process files for each temperature
for temp in temperatures:
    for file_path in file_paths_by_temp[temp]:
        try:
            data = scipy.io.loadmat(file_path)
        except Exception as e:
            print(f"❌ Error loading {file_path}: {e}")
            continue
        
        voltage_key = next((k for k in data if "Voltage" in k), None)
        current_key = next((k for k in data if "Current" in k), None)
        if not voltage_key or not current_key:
            print(f"❌ Voltage or Current data not found in {file_path}")
            continue
        
        voltage_data = data[voltage_key][0, 0]
        current_data = data[current_key][0, 0]
        voltage_time = np.arange(0, voltage_data['length'][0][0] * voltage_data['interval'][0][0], 
                               voltage_data['interval'][0][0])[:len(voltage_data['values'])]
        current_time = np.arange(0, current_data['length'][0][0] * current_data['interval'][0][0], 
                               current_data['interval'][0][0])[:len(current_data['values'])]
        voltage_values = voltage_data['values'].flatten()
        current_values = data[current_key][0, 0]['values'].flatten()
        
        try:
            interp_func = interp1d(current_time, current_values, kind='linear', fill_value='extrapolate')
            current_values_resampled = interp_func(voltage_time)
        except Exception as e:
            print(f"❌ Error interpolating current in {file_path}: {e}")
            continue
        
        baseline_indices = current_time < 10
        if not np.any(baseline_indices):
            print(f"⚠️ No data in first 10 s for baseline in {file_path}. Using full trace median.")
            baseline_data = current_values
        else:
            baseline_data = current_values[baseline_indices]
        baseline_data_sorted = np.sort(baseline_data)
        baseline_data_clipped = baseline_data_sorted[int(0.1 * len(baseline_data_sorted)):int(0.9 * len(baseline_data_sorted))]
        baseline_current = np.median(baseline_data_clipped)
        print(f"Baseline current for {file_path}: {baseline_current:.2f} pA")
        
        hyperpol_threshold = baseline_current - 1
        depol_threshold = baseline_current + 1
        baseline_threshold = 0.5
        pulses = []
        file_pulses_data = []
        state = 'baseline'
        start_time = None
        
        for i in range(1, len(current_values_resampled)):
            current = current_values_resampled[i]
            
            if state == 'baseline':
                if current < hyperpol_threshold:
                    start_time = voltage_time[i]
                    state = 'hyperpol'
            
            elif state == 'hyperpol':
                if abs(current - baseline_current) < baseline_threshold or current > depol_threshold:
                    end_time = voltage_time[i]
                    duration = end_time - start_time
                    if 0.5 <= duration <= 5.0:
                        step_indices = (voltage_time >= start_time) & (voltage_time <= start_time + 0.5)
                        v_peak = np.min(voltage_values[step_indices]) if np.any(step_indices) else np.nan
                        if not np.isnan(v_peak) and v_peak <= -90:
                            amplitude = np.min(current_values_resampled[(voltage_time >= start_time) & (voltage_time <= end_time)]) - baseline_current
                            pulses.append({
                                'start_time': start_time,
                                'end_time': end_time,
                                'amplitude': amplitude,
                                'v_peak': v_peak
                            })
                            pre_pulse_time = max(0, start_time - 0.7)
                            post_pulse_time = min(voltage_time[-1], end_time + 2.0)
                            trace_indices = (voltage_time >= pre_pulse_time) & (voltage_time <= post_pulse_time)
                            trace_time = voltage_time[trace_indices] - pre_pulse_time
                            trace_voltage = voltage_values[trace_indices]
                            file_pulses_data.append({
                                'start_time': start_time,
                                'end_time': end_time,
                                'time': trace_time,
                                'voltage': trace_voltage,
                                'v_peak': v_peak
                            })
                            print(f"Detected pulse in {file_path}: duration={duration:.2f}s, amplitude={amplitude:.2f} pA, V_peak={v_peak:.2f} mV")
                    state = 'depol' if current > depol_threshold else 'baseline'
                    start_time = None
            
            elif state == 'depol':
                if abs(current - baseline_current) < baseline_threshold:
                    state = 'baseline'
        
        if not pulses:
            print(f"❌ No valid hyperpolarizing pulses (0.5–5 s, V_peak ≤ -90 mV) in {file_path}. Skipping.")
            continue
        
        results.append({
            'file': file_path,
            'temperature': temp,
            'pulses': pulses,
            'voltage_time': voltage_time,
            'voltage_values': voltage_values,
            'current_values_resampled': current_values_resampled
        })
        all_pulses_data.append({
            'file': os.path.basename(file_path),
            'temperature': temp,
            'pulses': file_pulses_data
        })

# Process all pulses for sag analysis
if not results:
    print("❌ No valid data processed. Exiting.")
    sys.exit(1)

selected_results = []
plot_data = []

for result in results:
    for pulse_idx, pulse in enumerate(result['pulses'], 1):
        start_time = pulse['start_time']
        end_time = pulse['end_time']
        step_indices = (result['voltage_time'] >= start_time) & (result['voltage_time'] <= end_time)
        step_voltage = result['voltage_values'][step_indices]
        step_time = result['voltage_time'][step_indices]
        
        v_rest_indices = (result['voltage_time'] >= start_time - 0.05) & (result['voltage_time'] < start_time)
        v_rest = np.mean(result['voltage_values'][v_rest_indices]) if np.any(v_rest_indices) else np.nan
        v_peak = pulse['v_peak']
        v_ss_indices = (step_time >= step_time[-1] - 0.5)
        v_ss = np.mean(step_voltage[v_ss_indices]) if np.any(v_ss_indices) else np.nan
        sag_amplitude = v_ss - v_peak if not np.isnan(v_ss) and not np.isnan(v_peak) else np.nan
        sag_ratio = sag_amplitude / (v_peak - v_rest) if not np.isnan(sag_amplitude) and v_peak != v_rest else np.nan
        sag_slope = calculate_sag_slope(result['voltage_time'], result['voltage_values'], v_peak, v_ss, start_time, end_time)
        
        safe_temp = result['temperature'].replace('#', '_')
        trace_file = os.path.join(output_dir, f"pulse_trace_{os.path.basename(result['file'])}_pulse{pulse_idx}_{safe_temp}.txt")
        pre_pulse_time = max(0, start_time - 0.7)
        post_pulse_time = min(result['voltage_time'][-1], end_time + 2.0)
        trace_indices = (result['voltage_time'] >= pre_pulse_time) & (result['voltage_time'] <= post_pulse_time)
        trace_voltage = result['voltage_values'][trace_indices]
        trace_time = result['voltage_time'][trace_indices]
        relative_time = trace_time - pre_pulse_time
        
        with open(trace_file, 'w', encoding='utf-8', newline='\r\n') as f:
            f.write("Time (s)\tVoltage (mV)\r\n")
            for t, v in zip(relative_time, trace_voltage):
                f.write(f"{t:.4f}\t{v:.2f}\r\n")
        print(f"✅ Saved pulse trace to {trace_file}")
        
        selected_results.append({
            'file': os.path.basename(result['file']),
            'temperature': result['temperature'],
            'pulse_idx': pulse_idx,
            'current_amplitude': pulse['amplitude'],
            'v_rest': v_rest,
            'v_peak': v_peak,
            'v_ss': v_ss,
            'sag_amplitude': sag_amplitude,
            'sag_ratio': sag_ratio,
            'sag_slope': sag_slope,
            'step_time': step_time,
            'step_voltage': step_voltage,
            'start_time': start_time,
            'end_time': end_time
        })
        
        plot_data.append({
            'temperature': result['temperature'],
            'file': os.path.basename(result['file']),
            'pulse_idx': pulse_idx,
            'time': relative_time - (start_time - pre_pulse_time),
            'voltage': trace_voltage,
            'v_peak': v_peak
        })
        
        sag_data_by_temp[result['temperature']].append({
            'file': os.path.basename(result['file']),
            'pulse_idx': pulse_idx,
            'sag_amplitude': sag_amplitude,
            'v_peak': v_peak,
            'v_ss': v_ss,
            'sag_ratio': sag_ratio,
            'sag_slope': sag_slope
        })

# Save all sag data per temperature
for temp in temperatures:
    temp_sag_data = sag_data_by_temp[temp]
    if temp_sag_data:
        safe_temp = temp.replace('#', '_')
        output_file = os.path.join(output_dir, f'sag_potential_all_{safe_temp}.txt')
        with open(output_file, 'w', encoding='utf-8', newline='\r\n') as f:
            f.write("File\tPulse\tSag Amplitude (mV)\tV_peak (mV)\tV_ss (mV)\tSag Ratio\tSag Slope (mV/s)\r\n")
            for data in temp_sag_data:
                f.write(f"{data['file']}\t{data['pulse_idx']}\t{data['sag_amplitude']:.2f}\t"
                        f"{data['v_peak']:.2f}\t{data['v_ss']:.2f}\t{data['sag_ratio']:.4f}\t{data['sag_slope']:.2f}\r\n")
        print(f"✅ Saved all sag data to {output_file}")

# Create file-to-line-style mapping for traces_comparison.png
line_styles = ['-', '--', '-.', ':']
file_to_style = {}
for temp in temperatures:
    temp_files = sorted(set(os.path.basename(d['file']) for d in all_pulses_data if d['temperature'] == temp))
    file_to_style[temp] = {f: line_styles[i % len(line_styles)] for i, f in enumerate(temp_files)}

# Create file-to-color mapping for all_pulses_comparison.png
file_to_color = {}
for temp in temperatures:
    temp_files = sorted(set(os.path.basename(d['file']) for d in all_pulses_data if d['temperature'] == temp))
    if temp == '25C':
        # Shades of blue for 25C
        blue_shades = [(0, 0, 1), (0.2, 0.2, 0.8), (0.4, 0.4, 0.6), (0.6, 0.6, 0.4)]
        file_to_color[temp] = {f: blue_shades[i % len(blue_shades)] for i, f in enumerate(temp_files)}
    elif temp == '33C':
        # Shades of red for 33C
        red_shades = [(1, 0, 0), (0.8, 0.2, 0.2), (0.6, 0.4, 0.4), (0.4, 0.6, 0.6)]
        file_to_color[temp] = {f: red_shades[i % len(red_shades)] for i, f in enumerate(temp_files)}
    elif temp == '33#2':
        # Shades of orange for 33#2
        orange_shades = [(1, 0.5, 0), (0.8, 0.4, 0), (0.6, 0.3, 0), (0.4, 0.2, 0)]
        file_to_color[temp] = {f: orange_shades[i % len(orange_shades)] for i, f in enumerate(temp_files)}

# Plot and save all pulses
temp_colors = {'25C': 'b', '33C': 'r', '33#2': 'orange'}
if all_pulses_data:
    num_temps = len(temperatures)
    fig, axes = plt.subplots(1, num_temps, figsize=(9 * num_temps, 6), sharex=True, sharey=True)
    if num_temps == 1:
        axes = [axes]
    
    all_voltages = []
    for data in all_pulses_data:
        for pulse_idx, pulse in enumerate(data['pulses'], 1):
            all_voltages.extend(pulse['voltage'])
    y_min = min(all_voltages) - 5
    y_max = -35
    
    for idx, temp in enumerate(temperatures):
        ax = axes[idx]
        temp_data = [d for d in all_pulses_data if d['temperature'] == temp]
        for data in temp_data:
            color = file_to_color[temp].get(data['file'], temp_colors[temp])
            for pulse_idx, pulse in enumerate(data['pulses'], 1):
                ax.plot(pulse['time'], pulse['voltage'], color=color, 
                        label=f"{data['file']} Pulse {pulse_idx} (V_peak={pulse['v_peak']:.2f} mV)")
        ax.set_xlabel("Time (s)")
        ax.set_ylabel("Voltage (mV)" if idx == 0 else "")
        ax.set_title(f"{temp} Pulses")
        ax.set_ylim(y_min, y_max)
        ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=8, ncol=2)
        ax.grid(True)
    
    plt.tight_layout()
    all_pulses_plot_file = os.path.join(output_dir, "all_pulses_comparison.png")
    plt.savefig(all_pulses_plot_file)
    plt.close()
    print(f"✅ Saved all pulses comparison plot to {all_pulses_plot_file}")
    
    # Plot and save zoomed view (3.6–4 s)
    fig, axes = plt.subplots(1, num_temps, figsize=(9 * num_temps, 6), sharex=True, sharey=True)
    if num_temps == 1:
        axes = [axes]
    
    for idx, temp in enumerate(temperatures):
        ax = axes[idx]
        temp_data = [d for d in all_pulses_data if d['temperature'] == temp]
        for data in temp_data:
            color = file_to_color[temp].get(data['file'], temp_colors[temp])
            for pulse_idx, pulse in enumerate(data['pulses'], 1):
                mask = (pulse['time'] >= 3.6) & (pulse['time'] <= 4)
                if np.any(mask):
                    ax.plot(pulse['time'][mask], pulse['voltage'][mask], color=color, 
                            label=f"{data['file']} Pulse {pulse_idx} (V_peak={pulse['v_peak']:.2f} mV)")
        ax.set_xlabel("Time (s)")
        ax.set_ylabel("Voltage (mV)" if idx == 0 else "")
        ax.set_title(f"{temp} Pulses (Zoomed 3.6–4 s)")
        ax.set_xlim(3.6, 4)
        ax.set_ylim(y_min, y_max)
        ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=8, ncol=2)
        ax.grid(True)
    
    plt.tight_layout()
    zoomed_plot_file = os.path.join(output_dir, "all_pulses_comparison_zoomed.png")
    plt.savefig(zoomed_plot_file)
    plt.close()
    print(f"✅ Saved zoomed pulses comparison plot to {zoomed_plot_file}")
    
    all_pulses_trace_file = os.path.join(output_dir, "all_pulses_traces.txt")
    with open(all_pulses_trace_file, 'w', encoding='utf-8', newline='\r\n') as f:
        f.write("Temperature\tFile\tPulse\tTime (s)\tVoltage (mV)\r\n")
        for data in all_pulses_data:
            for i, pulse in enumerate(data['pulses'], 1):
                for t, v in zip(pulse['time'], pulse['voltage']):
                    f.write(f"{data['temperature']}\t{data['file']}\tPulse {i}\t{t:.4f}\t{v:.2f}\r\n")
    print(f"✅ Saved all pulses traces to {all_pulses_trace_file}")

# Save selected traces plot
plt.figure(figsize=(15, 6))
for data in plot_data:
    temp = data['temperature']
    file_name = data.get('file', 'Unknown')
    style = file_to_style[temp].get(file_name, line_styles[0])
    plt.plot(data['time'], data['voltage'], color=temp_colors[temp], linestyle=style,
             label=f"{temp} Pulse {data['pulse_idx']} (V_peak={data['v_peak']:.2f} mV)")
plt.xlabel("Time (s)")
plt.ylabel("Voltage (mV)")
plt.title("All Pulse Traces")
plt.ylim(y_min, y_max)
plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=8, ncol=2)
plt.grid(True)
plot_file = os.path.join(output_dir, "traces_comparison.png")
plt.savefig(plot_file)
plt.close()
print(f"✅ Saved trace comparison plot to {plot_file}")

# Graphical Interface
class SagViewer:
    def __init__(self, results):
        self.results = results
        self.index = 0
        self.fig, self.ax = plt.subplots(figsize=(10, 6))
        self.plot_current()
        
        ax_prev = plt.axes([0.7, 0.01, 0.1, 0.05])
        ax_next = plt.axes([0.81, 0.01, 0.1, 0.05])
        self.btn_prev = Button(ax_prev, 'Previous')
        self.btn_next = Button(ax_next, 'Next')
        self.btn_prev.on_clicked(self.prev)
        self.btn_next.on_clicked(self.next)
        
        plt.show()
    
    def plot_current(self):
        self.ax.clear()
        r = self.results[self.index]
        self.ax.plot(r['step_time'], r['step_voltage'], 'b-', label='Voltage Trace')
        self.ax.axvline(r['start_time'], color='g', linestyle='--', label='Step Start/End')
        self.ax.axvline(r['end_time'], color='g', linestyle='--')
        self.ax.axhline(r['v_rest'], color='k', linestyle=':', label=f'V_rest ({r["v_rest"]:.1f} mV)')
        self.ax.axhline(r['v_peak'], color='r', linestyle=':', label=f'V_peak ({r["v_peak"]:.1f} mV)')
        self.ax.axhline(r['v_ss'], color='purple', linestyle=':', label=f'V_ss ({r["v_ss"]:.1f} mV)')
        
        self.ax.annotate(
            f'Sag Amp: {r["sag_amplitude"]:.2f} mV\nSag Ratio: {r["sag_ratio"]:.3f}\nCurrent: {r["current_amplitude"]:.1f} pA\nSlope: {r["sag_slope"]:.2f} mV/s',
            xy=(r['start_time'] + (r['end_time'] - r['start_time']) / 2, r['v_peak']),
            xytext=(0, -30),
            textcoords='offset points',
            ha='center',
            bbox=dict(boxstyle='round,pad=0.3', fc='white', ec='black')
        )
        
        self.ax.set_xlabel('Time (s)')
        self.ax.set_ylabel('Voltage (mV)')
        self.ax.set_title(f"{r['file']} Pulse {r['pulse_idx']} ({r['temperature']}, {r['current_amplitude']:.1f} pA)")
        self.ax.legend()
        self.ax.grid(True)
        
        self.fig.canvas.draw()
    
    def prev(self, event):
        self.index = (self.index - 1) % len(self.results)
        self.plot_current()
    
    def next(self, event):
        self.index = (self.index + 1) % len(self.results)
        self.plot_current()

# Launch viewer
if selected_results:
    SagViewer(selected_results)
else:
    print("❌ No valid sag analysis results. Exiting.")
    sys.exit(1)
